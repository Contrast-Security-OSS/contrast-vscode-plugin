/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { FC, useEffect, useState } from 'react';
import {
  CustomFileVulnerability,
  FileVulnerability,
  ProjectVulnerability,
} from '../../../../common/types';
import { webviewPostMessage } from '../../../utils/postMessage';
import {
  WEBVIEW_COMMANDS,
  WEBVIEW_SCREENS,
} from '../../../../vscode-extension/utils/constants/commands';
import WarningOutlinedIcon from '@mui/icons-material/WarningOutlined';

interface PaneHeaderProps {
  node: CustomFileVulnerability;
  parentNode?: FileVulnerability; // Optional parentNode to hold level 1 for level 0 nodes
  onClick: () => void;
  show: boolean;
}

export const PaneHeader: FC<PaneHeaderProps> = ({
  node,
  parentNode,
  onClick,
  show,
}) => {
  const { issuesCount, label, child, severity, lineNumber, level } = node;
  const [showArrow, updateArrow] = useState('fa fa-angle-right');

  useEffect(() => {
    updateArrow(show ? 'fa fa-angle-down' : 'fa fa-angle-right');
  }, [show]);

  const handleClick = () => {
    // Determine what to send based on the level
    const payload =
      level === 0 && parentNode
        ? {
            ...node,
            fileName: parentNode.label,
            fileType: parentNode.fileType,
            filePath: parentNode.filePath,
            child: parentNode.child,
            scrollToLine: true,
          } // For level 0, include parent (level 1)
        : { ...node, scrollToLine: false }; // For level 1, just send its own details
    webviewPostMessage({
      command: WEBVIEW_COMMANDS.SCAN_OPEN_VULNERABILITY_FILE,
      payload, // Payload depends on node level
      screen: WEBVIEW_SCREENS.SCAN,
    });
  };

  const handleSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'CRITICAL':
        return 'red';
      case 'HIGH':
        return 'orange';
      case 'MEDIUM':
        return 'yellow';
      case 'LOW':
        return 'gray';
      case 'NOTE':
        return 'lightgray';
      default:
        return 'red';
    }
  };

  return (
    <div className="pane-header" role="pane">
      {child !== null && child !== undefined && child.length > 0 && (
        <i
          className={showArrow}
          style={{ fontSize: '20px' }}
          aria-hidden="true"
          onClick={() => {
            onClick();
          }}
        ></i>
      )}
      {lineNumber !== null && lineNumber !== undefined && (
        <>
          <WarningOutlinedIcon
            data-testid="warning-icon"
            fontSize="small"
            style={{ color: handleSeverityIcon(severity as string) }}
          />
          <span style={{ color: 'gray' }}>({lineNumber})</span>
        </>
      )}
      <div onClick={handleClick}>{label}</div>
      {issuesCount !== null && issuesCount !== undefined && (
        <div style={{ color: 'gray' }}>({issuesCount}) issues</div>
      )}
    </div>
  );
};

interface PanelBodyProps {
  child: [];
  parentNode: FileVulnerability; // Pass parent (level 1) to PanelBody
  p: number;
}

const PanelBody: FC<PanelBodyProps> = ({ child, parentNode, p }) => {
  return (
    <>
      {child !== null && child !== undefined && child.length > 0 ? (
        <TreeView treeData={child} parentNode={parentNode} p={p} />
      ) : null}
    </>
  );
};

interface TreeRowProps {
  node: any;
  parentNode?: FileVulnerability; // Optional parentNode for level 0 nodes
  p: number;
}

const TreeRow: FC<TreeRowProps> = ({ node, parentNode, p = 0 }) => {
  const { child, level } = node;
  const [show, updateShow] = useState(false);

  useEffect(() => {
    if (level === 2) {
      updateShow(true);
    }
  }, [level]);

  return (
    <div style={{ marginLeft: `${p}px` }} className="head">
      {/* Pass parentNode to PaneHeader if it's level 0, else pass undefined */}
      <PaneHeader
        node={node}
        parentNode={parentNode}
        onClick={() => updateShow(!show)}
        show={show}
      />
      {child !== null && child !== undefined && child.length > 0 && show && (
        <PanelBody child={child} parentNode={node} p={p + 10} />
      )}
    </div>
  );
};

interface TreeViewProps {
  treeData: ProjectVulnerability[];
  parentNode?: FileVulnerability; // Optional parentNode to handle hierarchy
  p: number;
}

const TreeView: FC<TreeViewProps> = ({ treeData, parentNode, p = 0 }) => {
  return (
    <>
      {treeData?.map(
        (node: ProjectVulnerability, index: React.Key | null | undefined) => {
          return (
            <div key={index}>
              {/* Pass parentNode to level 0 nodes only */}
              <TreeRow node={node} parentNode={parentNode} p={p} />
            </div>
          );
        }
      )}
    </>
  );
};

const VulnerabilityReport: FC<{ treeData: ProjectVulnerability[] }> = ({
  treeData,
}) => {
  return (
    <div style={{ overflow: 'auto' }}>
      <TreeView treeData={treeData} p={10} />
    </div>
  );
};

export { VulnerabilityReport };
