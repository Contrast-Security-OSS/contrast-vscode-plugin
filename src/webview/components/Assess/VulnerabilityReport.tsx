/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { FC, useEffect, useState } from 'react';
import {
  CustomFileVulnerability,
  FileVulnerability,
  ProjectVulnerability,
} from '../../../common/types';

import WarningOutlinedIcon from '@mui/icons-material/WarningOutlined';

interface PaneHeaderProps {
  node: CustomFileVulnerability;
  parentNode?: FileVulnerability; // Optional parentNode to hold level 1 for level 0 nodes
  onArrowClick: () => void;
  isExpanded: boolean;
  onSelect: (payload: any) => void; // Add onSelect callback
}

export const PaneHeader: FC<PaneHeaderProps> = ({
  node,
  parentNode,
  onArrowClick,
  isExpanded,
  onSelect, // destructure onSelect
}) => {
  const { issuesCount, label, child, severity, lineNumber, level } = node;
  const [arrowDirection, setArrowDirection] = useState('fa fa-angle-right');

  useEffect(() => {
    setArrowDirection(isExpanded ? 'fa fa-angle-down' : 'fa fa-angle-right');
  }, [isExpanded]);

  const handleNodeClick = () => {
    // Determine what to send based on the level

    const payload =
      level === 0 && parentNode
        ? {
            ...node,
            fileName: parentNode.label,
            fileType: parentNode.fileType,
            filePath: parentNode.filePath,
            child: parentNode.child,
            scrollToLine: true,
          }
        : { ...node, scrollToLine: false }; // For level 1, just send its own details
    onSelect(payload); // Pass payload to onSelect callback
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toUpperCase()) {
      case 'CRITICAL':
        return 'red';
      case 'HIGH':
        return 'orange';
      case 'MEDIUM':
        return 'yellow';
      case 'LOW':
        return 'gray';
      case 'NOTE':
        return 'lightgray';
      default:
        return 'red';
    }
  };

  return (
    <div className="pane-header" role="pane">
      {node.id}
      {child && child.length > 0 && (
        <i
          className={arrowDirection}
          style={{ fontSize: '20px' }}
          aria-hidden="true"
          onClick={onArrowClick}
        ></i>
      )}
      {lineNumber !== null && lineNumber !== undefined && (
        <>
          <WarningOutlinedIcon
            data-testid="warning-icon"
            fontSize="small"
            style={{ color: getSeverityColor(severity as string) }}
          />
          {lineNumber > 0 && (
            <span style={{ color: 'gray' }}>({lineNumber})</span>
          )}
        </>
      )}
      <div onClick={handleNodeClick}>{label}</div>
      {issuesCount !== null && issuesCount !== undefined && (
        <div style={{ color: 'gray' }}>({issuesCount}) issues</div>
      )}
    </div>
  );
};

interface NodeBodyProps {
  child: any[];
  parentNode: FileVulnerability; // Pass parent (level 1) to NodeBody
  p: number;
  onSelect: (payload: any) => void; // Add onSelect callback
}

const NodeBody: FC<NodeBodyProps> = ({ child, parentNode, p, onSelect }) => {
  return (
    <>
      {child !== null && child !== undefined && child.length > 0 ? (
        <TreeView
          treeData={child}
          parentNode={parentNode}
          p={p}
          onSelect={onSelect}
        />
      ) : null}
    </>
  );
};

interface NodeRowProps {
  node: any;
  parentNode?: FileVulnerability; // Optional parentNode for level 0 nodes
  p: number;
  onSelect: (payload: any) => void; // Add onSelect callback
}

const NodeRow: FC<NodeRowProps> = ({ node, parentNode, p = 0, onSelect }) => {
  const { child, level } = node;
  const [isExpanded, setIsExpanded] = useState(false);

  useEffect(() => {
    if (level === 2) {
      setIsExpanded(true);
    }
  }, [level]);

  return (
    <div style={{ marginLeft: `${p}px` }} className="head">
      {/* Pass parentNode to PaneHeader if it's level 0, else pass undefined */}
      <PaneHeader
        node={node}
        parentNode={parentNode}
        onArrowClick={() => setIsExpanded(!isExpanded)}
        isExpanded={isExpanded}
        onSelect={onSelect} // Pass onSelect to PaneHeader
      />
      {child !== null &&
        child !== undefined &&
        child.length > 0 &&
        isExpanded && (
          <NodeBody
            child={child}
            parentNode={node}
            p={p + 10}
            onSelect={onSelect}
          />
        )}
    </div>
  );
};

interface TreeViewProps {
  treeData: ProjectVulnerability[];
  parentNode?: FileVulnerability; // Optional parentNode to handle hierarchy
  p: number;
  onSelect: (payload: any) => void; // Add onSelect callback
}

const TreeView: FC<TreeViewProps> = ({
  treeData,
  parentNode,
  p = 0,
  onSelect,
}) => {
  return (
    <>
      {treeData?.map((node, index) => (
        <div key={index}>
          <NodeRow
            node={node}
            parentNode={parentNode}
            p={p}
            onSelect={onSelect}
          />
        </div>
      ))}
    </>
  );
};

const AssessVulnerabilityReport: FC<{
  treeData: ProjectVulnerability[];
  onSelect: (payload: any) => void; // Make onSelect required
}> = ({ treeData, onSelect }) => {
  return (
    <div>
      <TreeView treeData={treeData} p={10} onSelect={onSelect} />
    </div>
  );
};

export { AssessVulnerabilityReport };
