import React, { useState } from 'react';
import { FC, useEffect } from 'react';
import { VulnerabilityReport } from '../../../../components/Scan/Vulnerability/VulnerabilityReport';
import { webviewPostMessage } from '../../../../utils/postMessage';
import {
  WEBVIEW_COMMANDS,
  WEBVIEW_SCREENS,
} from '../../../../../vscode-extension/utils/constants/commands';
import { useSelector } from 'react-redux';
import {
  LocalizationJSON,
  ProjectVulnerability,
  ReducerTypes,
} from '../../../../../common/types';

const AllVulnerabilityFiles: FC = () => {
  const getAllVulFromState = useSelector(
    (state: ReducerTypes) => state.vulnerability.allFiles
  );

  const i18nData = useSelector((state: ReducerTypes) => state.i10ln.data);
  const [i18nFields, updateI18nFields] = useState<string>(
    "<h1>No vulnerabilities found for the project:</h1><ol><li>Go to the Contrast view in the Activity Bar.</li><li>Click the Retrieve Vulnerability button for the project.</li></ol><p>After retrieving vulnerabilities, return to this screen or else click on refresh icon to see the latest vulnerability report.</p><p>Tip: <span style='font-weight: 400;'>You can access this screen anytime via the Contrast Scan panel in the Activity Bar.</span></p>"
  );

  const [allfileVul, setAllFileVul] = useState<ProjectVulnerability[]>([]);

  useEffect(() => {
    if (i18nData !== null && i18nData !== undefined) {
      const { vulnerabilityReport } =
        i18nData as LocalizationJSON['contrastScan'];

      updateI18nFields(vulnerabilityReport?.htmlElements.translate);
    }
  }, [i18nData]);

  useEffect(() => {
    webviewPostMessage({
      command: WEBVIEW_COMMANDS.SCAN_GET_ALL_FILES_VULNERABILITY,
      payload: null,
      screen: WEBVIEW_SCREENS.SCAN,
    });
  }, []);

  useEffect(() => {
    if (
      getAllVulFromState !== null &&
      getAllVulFromState !== undefined &&
      getAllVulFromState?.responseData !== undefined &&
      getAllVulFromState.responseData !== null &&
      getAllVulFromState?.code === 200
    ) {
      setAllFileVul([getAllVulFromState.responseData as ProjectVulnerability]);
    } else {
      setAllFileVul([]);
    }
  }, [getAllVulFromState]);
  return (
    <>
      <>
        {allfileVul.length === 0 || allfileVul === null ? (
          <div
            className="vul-text-no-data"
            dangerouslySetInnerHTML={{ __html: i18nFields }}
          ></div>
        ) : (
          <VulnerabilityReport treeData={allfileVul} />
        )}
      </>
    </>
  );
};

export { AllVulnerabilityFiles };
