import React, { useEffect, useState } from 'react';
import { TabGroup } from '../../../../components/TabGroup';
import { Tooltip } from '@mui/material';
import { Tab } from '../../../../components/Tab';

import {
  AssessVulnerability,
  ContrastAssessLocale,
  PassLocalLang,
  ReducerTypes,
} from '../../../../../common/types';
import { useSelector } from 'react-redux';
import { Overview } from './tabs/Overview';
import { HowToFix } from './tabs/HowToFix';
import { Events } from './tabs/Events';
import { webviewPostMessage } from '../../../../utils/postMessage';
import {
  WEBVIEW_COMMANDS,
  WEBVIEW_SCREENS,
} from '../../../../../vscode-extension/utils/constants/commands';
import { HttpRequest } from './tabs/HttpRequest';
import { MarkAs } from './tabs/MarkAs';
import { Tags } from './tabs/Tags';
function TabViewer({
  tabId,
  vulnerability,
  translate,
}: {
  tabId: number;
  translate: PassLocalLang;
  vulnerability: unknown;
}) {
  switch (tabId) {
    case 1:
      return <Overview translate={translate} vulnerability={vulnerability} />;
    case 2:
      return <HowToFix vulnerability={vulnerability} />;
    case 3:
      return <Events vulnerability={vulnerability} />;
    case 4:
      return <HttpRequest vulnerability={vulnerability} />;
    case 5:
      return <Tags translate={translate} vulnerability={vulnerability} />;
    case 6:
      return <MarkAs translate={translate} vulnerability={vulnerability} />;
    default:
      return null;
  }
}

// Main ContrastScan Component
function SplitWindow({ activeVul }: { activeVul: unknown }) {
  const i18nData = useSelector((state: ReducerTypes) => state.i10ln.data);

  const [tabId, setTabId] = useState(1);
  const [tabs, setTabs] = useState([
    { id: 1, title: 'Overview', active: tabId === 1 },
    { id: 2, title: 'How To Fix', active: tabId === 2 },
    { id: 3, title: 'Events', active: tabId === 3 },
    { id: 4, title: 'Http Request', active: tabId === 4 },
    {
      id: 5,
      title: (
        <div style={{ padding: '0px 8px' }}>
          <i
            className="fa fa-tag"
            aria-hidden="true"
            style={{ fontSize: '14.4px' }}
          ></i>
        </div>
      ) as unknown as React.ReactNode,
      active: tabId === 5,
    },
    { id: 6, title: 'Mark as', active: tabId === 6 },
  ]);

  const [redirectLocale, setRedirectLocale] = useState('Redirect');

  useEffect(() => {
    handleTabChange(1);
  }, [activeVul]);

  useEffect(() => {
    if (i18nData !== null && i18nData !== undefined) {
      const { vulnerabilityReport, tooltips } =
        i18nData as unknown as ContrastAssessLocale;
      const tabs = vulnerabilityReport?.tabs;
      setRedirectLocale(tooltips?.redirect?.translate ?? 'Redirect');
      setTabs((prevTabs) =>
        prevTabs.map((item) => {
          const applyTitle = (title: string) => ({ ...item, title });
          switch (item.id) {
            case 1:
              return applyTitle(tabs?.overView?.translate as string);
            case 2:
              return applyTitle(tabs?.howToFix?.translate as string);
            case 3:
              return applyTitle(tabs?.events?.translate as string);
            case 4:
              return applyTitle(tabs?.httpRequest?.translate as string);
            case 6:
              return applyTitle(tabs?.markAs?.translate as string);
            default: {
              return item;
            }
          }
        })
      );
    }
  }, [i18nData]);

  function handleTabChange(id: number) {
    setTabId(id);
    setTabs((prevTabs) =>
      prevTabs.map((tab) => ({
        ...tab,
        active: tab.id === id,
      }))
    );
  }

  function handleRedirection() {
    if (activeVul !== null && activeVul !== undefined) {
      const data = activeVul as AssessVulnerability;
      if (data.popupMessage !== null && 'link' in data.popupMessage) {
        const { link } = data.popupMessage;
        webviewPostMessage({
          command: WEBVIEW_COMMANDS.ASSESS_REDIRECTION,
          payload: {
            data: link,
          },
          screen: WEBVIEW_SCREENS.ASSESS,
        });
      }
    }
  }

  return (
    <div className="assess-split-panel">
      <div className="assess-split-panel-header">
        <TabGroup onTabChange={handleTabChange}>
          {tabs.map((tab) => (
            <Tab
              key={tab.id}
              title={tab.title as string}
              isActive={tab.active}
            />
          ))}
        </TabGroup>
        <div className="redirection" onClick={handleRedirection}>
          <Tooltip
            title={redirectLocale}
            children={
              <i
                className="fa fa-share-square-o"
                style={{ fontSize: '17px' }}
                aria-hidden="true"
              ></i>
            }
          ></Tooltip>
        </div>
      </div>
      <div style={{ padding: '5px' }}>
        <TabViewer
          tabId={tabId}
          translate={i18nData}
          vulnerability={activeVul}
        />
      </div>
    </div>
  );
}

export { SplitWindow };
