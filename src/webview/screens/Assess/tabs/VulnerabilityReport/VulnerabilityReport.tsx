import React, { useEffect, useState } from 'react';
import {
  AssessProjectVulnerability,
  AssessVulnerability,
  ContrastAssessLocale,
  ReducerTypes,
} from '../../../../../common/types';

import { useSelector } from 'react-redux';
import { AssessVulnerabilityReport } from '../../../../components/Assess/VulnerabilityReport';
import { SplitWindow } from './SplitWindow';
import { webviewPostMessage } from '../../../../utils/postMessage';
import {
  WEBVIEW_COMMANDS,
  WEBVIEW_SCREENS,
} from '../../../../../vscode-extension/utils/constants/commands';

function vulnerabilityReport() {
  const i18nData = useSelector((state: ReducerTypes) => state.i10ln.data);
  const vulnerabilitiesList = useSelector(
    (state: ReducerTypes) => state.assessFilter.allFiles
  );
  const [i18nFields, updateI18nFields] = useState<string>(
    '<h1>No vulnerabilities found:</h1><ol><li>Navigate to the Contrast - Assess menu</li><li>Select the necessary filters and click Run Button.</li><li>View the results in the Vulnerability Report tab.</li></ol><p>After retrieving vulnerabilities, return to this screen or else click on refresh icon to see the latest vulnerability report.</p><p>'
  );

  const [allfileVul, setAllFileVul] = useState<AssessProjectVulnerability[]>(
    []
  );
  const [getSelectedVul, setSelectedVul] = useState<{
    fetching: null | AssessVulnerability;
  }>({
    fetching: null,
  });

  useEffect(() => {
    if (
      vulnerabilitiesList !== undefined &&
      vulnerabilitiesList !== null &&
      vulnerabilitiesList.responseData !== null &&
      vulnerabilitiesList.responseData !== undefined
    ) {
      setAllFileVul([
        vulnerabilitiesList.responseData,
      ] as AssessProjectVulnerability[]);
    } else {
      setAllFileVul([]);
      setSelectedVul({ fetching: null });
    }
  }, [vulnerabilitiesList]);

  useEffect(() => {
    if (vulnerabilitiesList === null || vulnerabilitiesList?.code === 400) {
      webviewPostMessage({
        command: WEBVIEW_COMMANDS.ASSESS_GET_INITIAL_ALL_FILES_VULNERABILITY,
        payload: null,
        screen: WEBVIEW_SCREENS.ASSESS,
      });
    }
  }, [vulnerabilitiesList]);

  useEffect(() => {
    if (i18nData !== null && i18nData !== null) {
      const { vulnerabilityReport } =
        i18nData as unknown as ContrastAssessLocale;
      updateI18nFields(vulnerabilityReport?.htmlElements?.translate as string);
    }
  }, [i18nData]);

  const setStyle = (width: 'full' | 'half') => {
    return { width: width === 'full' ? '100%' : '50%' };
  };

  const handleVulnerabilitySelect = (e: AssessVulnerability) => {
    if (e.events?.data[0].child?.length === 0 || !e?.http_request) {
      webviewPostMessage({
        command: WEBVIEW_COMMANDS.ASSESS_UPDATE_VULNERABILITY,
        payload: e,
        screen: WEBVIEW_SCREENS.ASSESS,
      });
    }
    setSelectedVul({ fetching: e });
  };

  return (
    <>
      <div className={`assess-vul-report `}>
        <div className={`tree-window  `} style={setStyle('full')}>
          {allfileVul.length === 0 || allfileVul === null ? (
            <div
              className="vul-text-no-data"
              dangerouslySetInnerHTML={{ __html: i18nFields }}
            ></div>
          ) : (
            <AssessVulnerabilityReport
              treeData={allfileVul}
              onSelect={(e) => {
                webviewPostMessage({
                  command: WEBVIEW_COMMANDS.ASSESS_OPEN_VULNERABILITY_FILE,
                  payload: e,
                  screen: WEBVIEW_SCREENS.ASSESS,
                });

                if (e?.level === 0) {
                  handleVulnerabilitySelect(e);
                }
              }}
            />
          )}
        </div>
        {getSelectedVul.fetching !== null &&
        allfileVul.length > 0 &&
        allfileVul[0]?.child?.length > 0 ? (
          <div className="split-window">
            <SplitWindow activeVul={getSelectedVul.fetching} />
          </div>
        ) : null}
      </div>
    </>
  );
}

export default vulnerabilityReport;
