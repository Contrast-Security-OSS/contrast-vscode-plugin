import React, { useEffect, useState } from 'react';
import {
  AssessVulnerability,
  ContrastAssessLocale,
  PassLocalLang,
  VulnerabilityOverview,
} from '../../../../../../common/types';

interface PropertiesValues {
  whatHappened: string;
  whatsTheRisk: string;
  firstDetectedDate: string;
  lastDetectedDate: string;
}
export function Overview({
  translate,
  vulnerability,
}: {
  translate: PassLocalLang;
  vulnerability: unknown;
}) {
  const [overviewData, setOverView] = useState<VulnerabilityOverview | null>();
  useEffect(() => {
    if (vulnerability !== null && vulnerability !== undefined) {
      const data = vulnerability as AssessVulnerability;
      let obj: VulnerabilityOverview = { ...data.overview };
      if (
        obj.chapters !== undefined &&
        obj.chapters !== null &&
        !Array.isArray(obj.chapters)
      ) {
        obj = {
          ...obj,
          chapters: [obj.chapters],
        };
      }
      setOverView(obj);
      const splitData = (dateTime: string) =>
        dateTime.slice(0, dateTime.indexOf(',')) || '';
      setDate({
        lastDate: splitData(data.popupMessage.lastDetected_date as string),
        firstDate: splitData(data.popupMessage.firstDetected_date as string),
      });
    }
  }, [vulnerability]);

  const [properties, setProperties] = useState<PropertiesValues>({
    whatHappened: 'What happened?',
    whatsTheRisk: "What's the risk?",
    firstDetectedDate: 'First Detected Date',
    lastDetectedDate: 'Last Detected Date',
  });

  const [date, setDate] = useState({ firstDate: '', lastDate: '' });

  useEffect(() => {
    if (translate !== null && translate !== undefined) {
      const response = translate as unknown as ContrastAssessLocale;
      const overView = response.vulnerabilityReport?.tabs?.overView;
      setProperties({
        whatHappened: overView?.formFields?.whatHappened.translate as string,
        whatsTheRisk: overView?.formFields?.whatsTheRisk.translate as string,
        firstDetectedDate: overView?.formFields?.firstDetectedDate
          .translate as string,
        lastDetectedDate: overView?.formFields?.lastDetectedDate
          .translate as string,
      });
    }
  }, [translate]);

  return (
    <div className="overview">
      <div className="whatHappend">
        <div className="title">{properties.whatHappened}</div>
        <div className="contents">
          {overviewData?.chapters?.map((item, index) => {
            return (
              <div className="content" key={index}>
                <div className="subTitle">{item.introText}</div>
                {item.body && <div className="subBody">{item.body}</div>}
              </div>
            );
          })}
        </div>
      </div>
      <div className="whatRisk">
        <div className="title">{properties.whatsTheRisk}</div>
        <div className="content">{overviewData?.risk?.text}</div>
      </div>
      <div>
        <span style={{ fontWeight: 'bold' }}>
          {properties.firstDetectedDate} :
        </span>
        {' ' + date.firstDate}
      </div>
      <div>
        <span style={{ fontWeight: 'bold' }}>
          {properties.lastDetectedDate} :
        </span>
        {' ' + date.lastDate}
      </div>
    </div>
  );
}
