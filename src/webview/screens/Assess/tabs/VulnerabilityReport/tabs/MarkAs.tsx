import React, { useEffect, useState } from 'react';
import {
  AssessFileVulnerability,
  AssessVulnerability,
  ContrastAssessLocale,
  FilterOption,
  PassLocalLang,
  ReducerTypes,
} from '../../../../../../common/types';
import {
  mainFilters,
  notAProblemSubfilters,
} from '../../../../../utils/constant';
import {
  ContrastDropdown,
  ContrastOption,
} from '../../../../../components/DropDown';
import { Button } from '../../../../../components/Button';
import { TextArea } from '../../../../../components/TextArea';
import { updateParams } from '../../../../../../vscode-extension/api/model/api.interface';
import {
  WEBVIEW_COMMANDS,
  WEBVIEW_SCREENS,
} from '../../../../../../vscode-extension/utils/constants/commands';
import { webviewPostMessage } from '../../../../../utils/postMessage';
import { useSelector } from 'react-redux';
import { findVulnerabilityByTraceId } from '../../../../../utils/helper';
import ContrastStore from '../../../../../utils/redux/store';
import { setMarkAsOkBehaviour } from '../../../../../utils/redux/slices/assessFilter';

export function MarkAs({
  translate,
  vulnerability,
}: {
  translate: PassLocalLang;
  vulnerability: unknown;
}) {
  const fetchAllFiles = useSelector(
    (state: ReducerTypes) => state.assessFilter.allFiles
  );
  const fetchMarkAsBtnBehaviour = useSelector(
    (state: ReducerTypes) => state.assessFilter.markAsBtnBehaviour
  );
  // --------------- use states --------------------------
  const [activeTraceId, setActiveTraceId] = useState<null | string>(null);
  const [mainFilter] = useState<FilterOption[]>(mainFilters);
  const [subFilters] = useState<FilterOption[] | []>(notAProblemSubfilters);
  const [activeMainFilter, setActiveMainFilter] = useState(
    mainFilters.length > 0 ? mainFilter[0].keycode : ''
  );
  const [activeSubFilters, setActiveSubFilters] = useState(
    subFilters.length > 0 ? subFilters[0].keycode : ''
  );
  const [isReasonDisabled, setReasonDisabled] = useState(true);
  const [note, setNote] = useState('');
  const [error, setError] = useState('');
  const [markAsLocale, setMarkAsLocale] = useState({
    markAs: 'Mark as',
    reason: 'Reason',
    addComment: 'Add Comment',
    justification: 'Justification',
    ok: {
      btn: 'Ok',
      tooltip: 'Ok',
    },
    clear: {
      btn: 'Clear',
      tooltip: 'Clear',
    },
  });

  const [okState, setOkState] = useState(false);

  useEffect(() => {
    if (translate !== null && translate !== undefined) {
      const response = translate as unknown as ContrastAssessLocale;
      const markAs = response.vulnerabilityReport?.tabs?.markAs;
      const button = response.buttons;
      const tooltip = response.tooltips;
      setMarkAsLocale({
        ...markAsLocale,
        markAs: markAs?.formFields?.markAs.translate ?? markAsLocale.markAs,
        reason: markAs?.formFields?.Reason.translate ?? markAsLocale.reason,
        addComment:
          markAs?.formFields?.addComment.translate ?? markAsLocale.addComment,
        justification:
          markAs?.formFields?.justification.translate ??
          markAsLocale.justification,
        clear: {
          btn: button?.clear?.translate ?? markAsLocale.clear.btn,
          tooltip: tooltip?.clear?.translate ?? markAsLocale.clear.tooltip,
        },
        ok: {
          btn: button?.ok?.translate ?? markAsLocale.ok.btn,
          tooltip: tooltip?.ok?.translate ?? markAsLocale.ok.tooltip,
        },
      });
    }
  }, [translate]);

  useEffect(() => {
    if (vulnerability !== null && vulnerability !== undefined) {
      const data = vulnerability as AssessVulnerability;
      setActiveTraceId(data.traceId ?? null);
    }
  }, [vulnerability]);

  useEffect(() => {
    if (
      fetchAllFiles !== undefined &&
      fetchAllFiles !== null &&
      fetchAllFiles.responseData !== null &&
      fetchAllFiles.responseData !== undefined
    ) {
      const vul =
        fetchAllFiles.responseData as unknown as AssessFileVulnerability &
          AssessVulnerability;
      if (vul !== null && vul !== undefined && activeTraceId !== null) {
        const data = findVulnerabilityByTraceId([vul], activeTraceId);
        if (data !== null && data !== undefined) {
          if (
            data?.popupMessage?.status !== null &&
            data?.popupMessage?.status !== undefined
          ) {
            let status = data.popupMessage.status;
            if (status.toLocaleLowerCase() === 'not a problem') {
              status = 'NotAProblem';
            }
            if (status.toLocaleLowerCase() === 'remediated - auto-verified') {
              status = 'AutoRemediated';
            }
            setActiveMainFilter(status);
            if (status === 'NotAProblem') {
              setReasonDisabled(false);
              setActiveSubFilters(data.Substatus_keycode);
            } else {
              setReasonDisabled(true);
              setActiveSubFilters('');
            }
          }
        }
      }
    }
  }, [fetchAllFiles, activeTraceId]);

  useEffect(() => {
    if (activeMainFilter === 'NotAProblem' && note.length < 2) {
      setOkState(true);
      if (note.length === 0) {
        setError('Justification is required');
      } else if (note.length < 2) {
        setError('Justification must be at least 2 characters long');
      } else {
        setError('');
      }
    } else {
      setError('');
      setOkState(fetchMarkAsBtnBehaviour);
    }
  }, [note, activeSubFilters, fetchMarkAsBtnBehaviour, activeMainFilter]);

  const handleOk = () => {
    if (activeTraceId !== null) {
      let payload: updateParams = {
        traceId: [activeTraceId],
        note: note ?? '',
        status: activeMainFilter,
      };
      if (activeMainFilter === 'NotAProblem') {
        payload = { ...payload, substatus: activeSubFilters };
      }
      ContrastStore.dispatch(setMarkAsOkBehaviour(true));
      webviewPostMessage({
        command: WEBVIEW_COMMANDS.ASSESS_ADD_MARK,
        payload: payload,
        screen: WEBVIEW_SCREENS.ASSESS,
      });
    }
  };
  return (
    <div className="markAs">
      <div className="mark-as-container">
        <div className="feature">
          <div className="feature-label">{markAsLocale.markAs}</div>
          <div style={{ width: '180px' }}>
            <ContrastDropdown
              id="applyExistingTag"
              value={activeMainFilter}
              onChange={(e) => {
                setActiveMainFilter(e.value as string);
                if (e.value === 'NotAProblem') {
                  setActiveSubFilters(
                    subFilters.length > 0 ? subFilters[0].keycode : ''
                  );
                  setReasonDisabled(false);
                } else {
                  setReasonDisabled(true);
                }
              }}
            >
              {mainFilter.map((tag, index) => (
                <ContrastOption
                  key={index}
                  value={tag.keycode}
                  additionalProps={tag}
                >
                  {tag.label}
                </ContrastOption>
              ))}
            </ContrastDropdown>
          </div>
        </div>
        {isReasonDisabled === false && (
          <div className="feature">
            <div className="feature-label">{markAsLocale.reason}</div>
            <div style={{ width: '180px' }}>
              <ContrastDropdown
                id="reason"
                isDisabled={isReasonDisabled}
                value={activeSubFilters}
                onChange={(e) => {
                  setActiveSubFilters(e.value as string);
                }}
                tooltipPlacement="left-end"
              >
                {subFilters.map((tag, index) => (
                  <ContrastOption
                    key={index}
                    value={tag.keycode}
                    additionalProps={tag}
                  >
                    {tag.label}
                  </ContrastOption>
                ))}
              </ContrastDropdown>
            </div>
          </div>
        )}

        <div className="feature">
          <div className="feature-label">
            {activeMainFilter === 'NotAProblem'
              ? markAsLocale.justification
              : markAsLocale.addComment}
          </div>
          <div className="custom-text-area">
            <TextArea
              placeHolder="..."
              onInput={(e) => setNote(e.replace(/^\s+/, ''))}
              value={note}
            />
            {error && (
              <p style={{ color: 'red', fontSize: '12px', marginTop: '5px' }}>
                {error}
              </p>
            )}
          </div>
        </div>
      </div>
      <div className="button-group">
        <Button
          onClick={handleOk}
          isDisable={okState}
          title={markAsLocale.ok.btn}
          id="ok"
          color="btn-blue"
          tooltip={markAsLocale.ok.tooltip}
        />
        <Button
          onClick={() => setNote('')}
          title={markAsLocale.clear.btn}
          id="clear"
          color="btn-blue"
          tooltip={markAsLocale.clear.tooltip}
        />
      </div>
    </div>
  );
}
