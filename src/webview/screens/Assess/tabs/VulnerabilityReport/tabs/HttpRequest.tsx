import React, { useEffect, useState } from 'react';
import {
  AssessFileVulnerability,
  AssessVulnerability,
  ReducerTypes,
  VulnerabilityHttpRequest,
} from '../../../../../../common/types';
import { useSelector } from 'react-redux';
import { findVulnerabilityByTraceId } from '../../../../../utils/helper';
export function HttpRequest({ vulnerability }: { vulnerability: unknown }) {
  const [httpRequest, setHttpRequest] = useState<VulnerabilityHttpRequest>({
    text: '',
  });
  const vulnerabilitiesList = useSelector(
    (state: ReducerTypes) => state.assessFilter.allFiles
  );
  const [isHttpRequestthere, setHttpRequestIsTere] = useState(false);
  const [traceId, setTraceId] = useState<null | string>(null);
  useEffect(() => {
    if (vulnerability !== null && vulnerability !== undefined) {
      const data = vulnerability as AssessVulnerability;
      setTraceId(data.traceId ?? null);
      if (
        data.http_request !== null &&
        data.http_request !== undefined &&
        'text' in data.http_request
      ) {
        if (data.http_request.text.length > 0) {
          setHttpRequestIsTere(true);
        }
        setHttpRequest({ text: data.http_request.text ?? '' });
      }
    }
  }, [vulnerability]);

  useEffect(() => {
    if (
      vulnerabilitiesList !== undefined &&
      vulnerabilitiesList !== null &&
      vulnerabilitiesList.responseData !== null &&
      vulnerabilitiesList.responseData !== undefined
    ) {
      const vul =
        vulnerabilitiesList.responseData as unknown as AssessFileVulnerability &
          AssessVulnerability;
      if (isHttpRequestthere === false && traceId !== null) {
        const b = findVulnerabilityByTraceId([vul], traceId);
        if (b !== null && b !== undefined) {
          const events = b.http_request;

          if (events !== undefined && events !== null && 'text' in events) {
            setHttpRequest({ text: events?.text ?? '' });
          }
        }
      }
    }
  }, [vulnerabilitiesList, isHttpRequestthere, traceId]);

  return <div className="httpRequest">{httpRequest.text}</div>;
}
