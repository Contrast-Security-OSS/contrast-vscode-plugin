import * as vscode from 'vscode';
import {
  CONSTRAST_SCAN,
  CONTRAST_RETRIEVE_VULNERABILITIES,
  WEBVIEW_COMMANDS,
} from '../../utils/constants/commands';
import { getProjectVulnerabilties } from '../../api/services/apiService';
import { ContrastPanelInstance } from './webviewHandler';
import { toggleContrastPanel } from '../../utils/toggleContrastPanel';
import { ShowInformationPopup } from './messageHandler';
import { localeI18ln } from '../../../l10n';
import {
  featureController,
  interlockModeSwitch,
  scanRetrieveBlocker,
} from '../../utils/helper';
import { scanRetrievelDetectorAcrossIds } from '../../utils/multiInstanceConfigSync';

const registerRetrieveVulCommand = vscode.commands.registerCommand(
  CONTRAST_RETRIEVE_VULNERABILITIES,
  async () => {
    const isModeSwitched = await interlockModeSwitch('scan');
    const scanRetrieveBlockerDetect = scanRetrieveBlocker.getSlot();
    if (isModeSwitched && scanRetrieveBlockerDetect === false) {
      featureController.setSlot('scan');
      ShowInformationPopup(
        localeI18ln.getTranslation('persistResponse.retrievingVulnerabilities')
      );
      await scanRetrievelDetectorAcrossIds.disable();
      const res = await getProjectVulnerabilties();
      await scanRetrievelDetectorAcrossIds.enable();
      vscode.commands.executeCommand(CONSTRAST_SCAN);
      toggleContrastPanel();
      ContrastPanelInstance.activeRetrieveVulnerability();
      ContrastPanelInstance.postMessage({
        command: WEBVIEW_COMMANDS.SCAN_GET_ALL_FILES_VULNERABILITY,
        data: res,
      });
    }
  }
);

export { registerRetrieveVulCommand };
