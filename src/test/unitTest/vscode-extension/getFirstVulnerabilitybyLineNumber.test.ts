import { getDataFromCache } from '../../../vscode-extension/cache/cacheManager';
import {
  resolveFailure,
  resolveSuccess,
} from '../../../vscode-extension/utils/errorHandling';
import { ApiResponse } from '../../../common/types';
import { l10n } from '../../../l10n';
import { getFirstVulnerabilitybyLineNumber } from '../../../vscode-extension/api/services/apiService';
import { filterCriticalVulnerabilitiesLineNumber } from '../../../vscode-extension/utils/commonUtil';
import { ProjectSource } from '../../../vscode-extension/api/model/api.interface';
import path from 'path';
import { Uri } from 'vscode';

jest.mock('../../../vscode-extension/utils/errorHandling');
jest.mock('../../../vscode-extension/cache/cacheManager');

jest.mock('vscode', () => ({
  env: {
    language: 'en',
    appName: 'VSCode',
  },
  workspace: {
    workspaceFolders: [{ uri: { fsPath: '/path/to/mock/workspace' } }],
    onDidChangeConfiguration: jest.fn(),
  },
  window: {
    activeTextEditor: {
      document: {
        fileName: 'test.js',
      },
    },
  },
  TreeItem: class {
    [x: string]: { dark: Uri; light: Uri };
    constructor(
      label: { dark: Uri; light: Uri },
      /* eslint-disable @typescript-eslint/no-explicit-any */
      command: any = null,
      /* eslint-disable @typescript-eslint/no-explicit-any */
      icon: any = null
    ) {
      this.label = label;
      if (command !== null) {
        this.command = {
          title: label,
          command: command,
        } as any;
      }
      if (icon !== null) {
        const projectRoot = path.resolve(__dirname, '..');
        const iconPath = Uri.file(path.join(projectRoot, 'assets', icon));
        this.iconPath = {
          dark: iconPath,
          light: iconPath,
        };
      }
    }
  },
  Uri: {
    file: jest.fn().mockReturnValue('mockUri'),
  },
  commands: {
    registerCommand: jest.fn(),
  },
  languages: {
    registerHoverProvider: jest.fn(),
  },
}));

jest.mock(
  '../../../vscode-extension/commands/ui-commands/webviewHandler',
  () => ({
    ContrastPanelInstance: {
      postMessage: jest.fn(),
    },
  })
);

const locale = new l10n('en');
const mockedResolveFailure = resolveFailure as jest.MockedFunction<
  typeof resolveFailure
>;
const mockedResolveSuccess = resolveSuccess as jest.MockedFunction<
  typeof resolveSuccess
>;
const mockedGetDataFromCache = getDataFromCache as jest.MockedFunction<
  typeof getDataFromCache
>;

describe('getFirstVulnerabilitybyLineNumber', () => {
  beforeEach(() => {
    mockedResolveFailure.mockReset();
    mockedResolveSuccess.mockReset();
    mockedGetDataFromCache.mockReset();
  });

  it('should return failure if the file is not found in the data', async () => {
    const fileName = 'nonExistentFile.js';
    const lineNumber = 10;

    mockedGetDataFromCache.mockResolvedValue({
      responseData: {
        child: [],
      },
    } as unknown as ApiResponse);

    mockedResolveFailure.mockReturnValue({
      message: locale.getTranslation('apiResponse.fileNotFound') as string,
      code: 400,
      status: 'failure',
      responseData: {},
    });

    const response = await getFirstVulnerabilitybyLineNumber(
      fileName,
      lineNumber
    );

    expect(mockedResolveFailure).toHaveBeenCalledWith(
      locale.getTranslation('apiResponse.fileNotFound'),
      400
    );
    expect(response).toEqual({
      message: locale.getTranslation('apiResponse.fileNotFound'),
      code: 400,
      status: 'failure',
      responseData: {},
    });
  });

  it('should return the first critical vulnerability if found for the given file and line number', async () => {
    const fileName = 'file1.js';
    const lineNumber = 10;

    const mockResponseData = {
      responseData: {
        child: [
          {
            label: 'file1.js',
            child: [
              {
                severity: 'CRITICAL',
                lineNumber: 10,
                filePath: 'file1.js',
                level: 0,
                label: 'vuln1',
                popupMessage: 'Critical vulnerability',
                language: 'JavaScript',
                scanId: '123',
                name: 'vuln123',
                id: 'vuln-1',
                organizationId: '',
                projectId: '',
                ruleId: 'rule1',
              },
            ],
          },
        ],
      },
    } as unknown as ApiResponse;

    mockedGetDataFromCache.mockResolvedValue(mockResponseData);

    const expectedResponse = {
      severity: 'CRITICAL',
      lineNumber: 10,
      filePath: 'file1.js',
      level: 0,
      label: 'vuln1',
      popupMessage: 'Critical vulnerability',
      language: 'JavaScript',
      scanId: '123',
      name: 'vuln123',
      id: 'vuln-1',
      organizationId: '',
      projectId: '',
      ruleId: 'rule1',
    };

    mockedResolveSuccess.mockReturnValue({
      message: locale.getTranslation(
        'apiResponse.firstVulnerabilityByLineSuccess'
      ) as string,
      code: 200,
      status: 'success',
      /* eslint-disable @typescript-eslint/no-explicit-any */
      responseData: expectedResponse as any,
    });

    const response = await getFirstVulnerabilitybyLineNumber(
      fileName,
      lineNumber
    );

    expect(response).toEqual({
      message: locale.getTranslation(
        'apiResponse.firstVulnerabilityByLineSuccess'
      ) as string,
      code: 200,
      status: 'success',
      responseData: expectedResponse,
    });

    expect(mockedResolveSuccess).toHaveBeenCalledWith(
      locale.getTranslation(
        'apiResponse.firstVulnerabilityByLineSuccess'
      ) as string,
      200,
      expectedResponse
    );
  });

  describe('filterCriticalVulnerabilitiesLineNumber', () => {
    it('should filter vulnerabilities by severity and line number correctly', () => {
      const mockData: ProjectSource = {
        label: 'project',
        level: 1,
        issuesCount: 1,
        filesCount: 1,
        child: [
          {
            label: 'file1.js',
            level: 1,
            issuesCount: 1,
            child: [
              {
                severity: 'LOW',
                lineNumber: 10,
                filePath: 'file1.js',
                level: 0,
                label: '',
                popupMessage: {
                  message: '',
                  lastDetected_date: '',
                  status: '',
                },
                language: '',
                scanId: '',
                name: '',
                id: '',
                organizationId: '',
                projectId: '',
                ruleId: '',
              },
            ],
            filePath: '',
            fileType: '',
          },
        ],
      };

      const result = filterCriticalVulnerabilitiesLineNumber(
        mockData,
        'CRITICAL',
        'file1.js',
        10
      );

      expect(result).toEqual({
        child: [],
        filesCount: 1,
        issuesCount: 1,
        label: 'project',
        level: 1,
      });
    });

    it('should return empty data if no vulnerabilities match severity and line number', () => {
      const mockData: ProjectSource = {
        label: 'project',
        level: 1,
        issuesCount: 1,
        filesCount: 1,
        child: [
          {
            label: 'file1.js',
            level: 1,
            issuesCount: 1,
            child: [
              {
                severity: 'LOW',
                lineNumber: 10,
                filePath: 'file1.js',
                level: 0,
                label: '',
                popupMessage: {
                  message: '',
                  lastDetected_date: '',
                  status: '',
                },
                language: '',
                scanId: '',
                name: '',
                id: '',
                organizationId: '',
                projectId: '',
                ruleId: '',
              },
            ],
            filePath: '',
            fileType: '',
          },
        ],
      };
      const result = filterCriticalVulnerabilitiesLineNumber(
        mockData,
        'CRITICAL',
        'file1.js',
        10
      );

      expect(result).toEqual({
        child: [],
        filesCount: 1,
        issuesCount: 1,
        label: 'project',
        level: 1,
      });
    });
  });
});
