import { getVulnerabilitybyLineNumber } from '../../../vscode-extension/api/services/apiService';
import { getDataFromCache } from '../../../vscode-extension/cache/cacheManager';
import {
  resolveFailure,
  resolveSuccess,
} from '../../../vscode-extension/utils/errorHandling';
import { ApiResponse } from '../../../common/types';
import { l10n } from '../../../l10n';
import path from 'path';
import { Uri } from 'vscode';

jest.mock('../../../vscode-extension/utils/errorHandling');
jest.mock('../../../vscode-extension/cache/cacheManager');

jest.mock('vscode', () => ({
  env: {
    language: 'en',
    appName: 'VSCode',
  },
  workspace: {
    workspaceFolders: [{ uri: { fsPath: '/path/to/mock/workspace' } }],
  },
  window: {
    activeTextEditor: {
      document: {
        fileName: 'test.js',
      },
    },
  },
  TreeItem: class {
    [x: string]: { dark: Uri; light: Uri };
    constructor(
      label: { dark: Uri; light: Uri },
      /* eslint-disable @typescript-eslint/no-explicit-any */
      command: any = null,
      /* eslint-disable @typescript-eslint/no-explicit-any */
      icon: any = null
    ) {
      this.label = label;
      if (command !== null) {
        this.command = {
          title: label,
          command: command,
        } as any;
      }
      if (icon !== null) {
        const projectRoot = path.resolve(__dirname, '..');
        const iconPath = Uri.file(path.join(projectRoot, 'assets', icon));
        this.iconPath = {
          dark: iconPath,
          light: iconPath,
        };
      }
    }
  },
  Uri: {
    file: jest.fn().mockReturnValue('mockUri'),
  },
}));

jest.mock(
  '../../../vscode-extension/commands/ui-commands/webviewHandler',
  () => ({
    ContrastPanelInstance: {
      postMessage: jest.fn(),
    },
  })
);

const locale = new l10n('en');

const mockedResolveFailure = resolveFailure as jest.MockedFunction<
  typeof resolveFailure
>;
const mockedResolveSuccess = resolveSuccess as jest.MockedFunction<
  typeof resolveSuccess
>;
const mockedGetDataFromCache = getDataFromCache as jest.MockedFunction<
  typeof getDataFromCache
>;

describe('getVulnerabilitybyLineNumber', () => {
  beforeEach(() => {
    mockedResolveFailure.mockReset();
    mockedResolveSuccess.mockReset();
    mockedGetDataFromCache.mockReset();
  });

  it('should return failure if file is not found in cache data', async () => {
    const fileName = 'testFile.js';
    const lineNumber = 42;

    mockedGetDataFromCache.mockResolvedValue({
      responseData: {
        child: [{ label: 'anotherFile.js', vulnerabilities: [] }],
      },
    } as unknown as ApiResponse);

    mockedResolveFailure.mockReturnValue({
      message: locale.getTranslation('apiResponse.fileNotFound') as string,
      code: 400,
      status: 'failure',
      responseData: {},
    });

    const response = await getVulnerabilitybyLineNumber(fileName, lineNumber);

    expect(mockedResolveFailure).toHaveBeenCalledWith(
      locale.getTranslation('apiResponse.fileNotFound'),
      400
    );
    expect(response).toEqual({
      message: locale.getTranslation('apiResponse.fileNotFound') as string,
      code: 400,
      status: 'failure',
      responseData: {},
    });
  });

  it('should return failure if no project is found in persisted data', async () => {
    const fileName = 'testFile.js';
    const lineNumber = 42;

    mockedGetDataFromCache.mockResolvedValue({
      responseData: {
        child: [{ label: 'anotherFile.js', vulnerabilities: [] }],
      },
    } as unknown as ApiResponse);

    mockedResolveFailure.mockReturnValue({
      message: locale.getTranslation('apiResponse.fileNotFound') as string,
      code: 400,
      status: 'failure',
      responseData: {},
    });

    const response = await getVulnerabilitybyLineNumber(fileName, lineNumber);

    expect(mockedResolveFailure).toHaveBeenCalledWith(
      locale.getTranslation('apiResponse.fileNotFound'),
      400
    );
    expect(response).toEqual({
      message: locale.getTranslation('apiResponse.fileNotFound') as string,
      code: 400,
      status: 'failure',
      responseData: {},
    });
  });

  it('should handle empty child array gracefully (no files in project)', async () => {
    const fileName = 'testFile.js';
    const lineNumber = 42;

    mockedGetDataFromCache.mockResolvedValue({
      responseData: {
        child: [],
      },
    } as unknown as ApiResponse);

    mockedResolveFailure.mockReturnValue({
      message: locale.getTranslation('apiResponse.fileNotFound') as string,
      code: 400,
      status: 'failure',
      responseData: {},
    });

    const response = await getVulnerabilitybyLineNumber(fileName, lineNumber);

    expect(mockedResolveFailure).toHaveBeenCalledWith(
      locale.getTranslation('apiResponse.fileNotFound'),
      400
    );
    expect(response).toEqual({
      message: locale.getTranslation('apiResponse.fileNotFound') as string,
      code: 400,
      status: 'failure',
      responseData: {},
    });
  });

  it('should return success if vulnerabilities are found at the given line number', async () => {
    const fileName = 'testFile.js';
    const lineNumber = 42;

    const mockVulnerabilities = [
      { lineNumber: 42, vulnerability: 'Sample Vulnerability 1' },
      { lineNumber: 42, vulnerability: 'Sample Vulnerability 2' },
    ];

    mockedGetDataFromCache.mockResolvedValue({
      responseData: {
        child: [
          {
            label: fileName,
            child: [
              { lineNumber: 42, vulnerability: 'Sample Vulnerability 1' },
              { lineNumber: 42, vulnerability: 'Sample Vulnerability 2' },
            ],
          },
        ],
      },
    } as unknown as ApiResponse);

    mockedResolveSuccess.mockReturnValue({
      message: locale.getTranslation(
        'apiResponse.vulnerabilityByLineSuccess'
      ) as string,
      code: 200,
      status: 'success',
      /* eslint-disable @typescript-eslint/no-explicit-any */
      responseData: mockVulnerabilities as any,
    });

    const response = await getVulnerabilitybyLineNumber(fileName, lineNumber);

    expect(mockedResolveSuccess).toHaveBeenCalledWith(
      locale.getTranslation('apiResponse.vulnerabilityByLineSuccess'),
      200,
      mockVulnerabilities
    );
    expect(response).toEqual({
      message: locale.getTranslation(
        'apiResponse.vulnerabilityByLineSuccess'
      ) as string,
      code: 200,
      status: 'success',
      responseData: mockVulnerabilities,
    });
  });

  it('should return empty array if no vulnerabilities are found at the given line number', async () => {
    const fileName = 'testFile.js';
    const lineNumber = 42;

    mockedGetDataFromCache.mockResolvedValue({
      responseData: {
        child: [
          {
            label: fileName,
            child: [
              { lineNumber: 40, vulnerability: 'Sample Vulnerability 1' },
              { lineNumber: 41, vulnerability: 'Sample Vulnerability 2' },
            ],
          },
        ],
      },
    } as unknown as ApiResponse);

    mockedResolveSuccess.mockReturnValue({
      message: locale.getTranslation(
        'apiResponse.vulnerabilityByLineSuccess'
      ) as string,
      code: 200,
      status: 'success',
      responseData: [],
    });

    const response = await getVulnerabilitybyLineNumber(fileName, lineNumber);

    expect(mockedResolveSuccess).toHaveBeenCalledWith(
      locale.getTranslation('apiResponse.vulnerabilityByLineSuccess'),
      200,
      []
    );
    expect(response).toEqual({
      message: locale.getTranslation(
        'apiResponse.vulnerabilityByLineSuccess'
      ) as string,
      code: 200,
      status: 'success',
      responseData: [],
    });
  });
});
