import axios from 'axios';
import { resolveFailure } from '../../../vscode-extension/utils/errorHandling';
import { l10n } from '../../../l10n';
import { GetAllConfiguredProjects } from '../../../vscode-extension/persistence/PersistenceConfigSetting';
import { getScanVulnerabilityResults } from '../../../vscode-extension/api/services/apiService';
import path from 'path';
import { Uri } from 'vscode';
import { getAllAssessFilters } from '../../../vscode-extension/utils/helper';
import MockAdapter from 'axios-mock-adapter';

jest.mock('axios');
jest.mock('axios-retry', () => {
  return jest.fn();
});

jest.mock('../../../vscode-extension/api/services/apiService', () => ({
  ...jest.requireActual('../../../vscode-extension/api/services/apiService'),

  getApplicationById: jest.fn(),
}));

jest.mock(
  '../../../vscode-extension/persistence/PersistenceConfigSetting',
  () => ({
    GetAllConfiguredProjects: jest.fn(),
  })
);

jest.mock('../../../vscode-extension/utils/helper', () => ({
  getAllAssessFilters: jest.fn(),
}));

jest.mock('vscode', () => ({
  env: {
    language: 'en',
    appName: 'VSCode',
  },
  workspace: {
    workspaceFolders: [{ uri: { fsPath: '/path/to/mock/workspace' } }],
  },
  window: {
    activeTextEditor: {
      document: {
        fileName: 'test.js',
      },
    },
    showErrorMessage: jest.fn(),
    showInformationMessage: jest.fn(),
  },

  TreeItem: class {
    [x: string]: { dark: Uri; light: Uri };
    constructor(
      label: { dark: Uri; light: Uri },
      /* eslint-disable @typescript-eslint/no-explicit-any */
      command: any = null,
      /* eslint-disable @typescript-eslint/no-explicit-any */
      icon: any = null
    ) {
      this.label = label;
      if (command !== null) {
        this.command = {
          title: label,
          command: command,
        } as any;
      }
      if (icon !== null) {
        const projectRoot = path.resolve(__dirname, '..');
        const iconPath = Uri.file(path.join(projectRoot, 'assets', icon));
        this.iconPath = {
          dark: iconPath,
          light: iconPath,
        };
      }
    }
  },
  Uri: {
    file: jest.fn().mockReturnValue('mockUri'),
  },
}));

jest.mock(
  '../../../vscode-extension/commands/ui-commands/webviewHandler',
  () => ({
    ContrastPanelInstance: {
      postMessage: jest.fn(),
    },
  })
);

jest.mock('../../../vscode-extension/logging/logger', () => ({
  loggerInstance: {
    logMessage: jest.fn(),
  },
}));

jest.mock('../../../vscode-extension/utils/errorHandling', () => ({
  resolveSuccess: jest.fn(),
  resolveFailure: jest.fn(),
}));

// const mockedAxios = axios as jest.Mocked<typeof axios>;
const localeI18n = new l10n('en');

describe('getScanVulnerabilityResults', () => {
  let mockAxios: MockAdapter;
  const mockAppId = 'app123';
  const mockConfiguredProject = {
    projectId: '456-ABC-789-XYZ',
    contrastURL: 'https://xyz.com',
    userName: 'xyz@xyz.com',
    serviceKey: 'ABCDEFGHIJ',
    apiKey: 'PQRS1234TUV5678',
    organizationId: '123-XYZ-456-ABC-789',
    source: 'assess',
  };

  beforeEach(() => {
    mockAxios = new MockAdapter(axios as any);
    jest.clearAllMocks();

    (GetAllConfiguredProjects as jest.Mock).mockResolvedValue({
      responseData: [mockConfiguredProject],
    });

    (getAllAssessFilters as jest.Mock).mockResolvedValue({
      responseData: null,
    });
  });

  afterEach(() => {
    mockAxios.restore();
  });

  it('should return failure if project not found', async () => {
    (GetAllConfiguredProjects as jest.Mock).mockResolvedValue({
      responseData: [],
    });

    const result = await getScanVulnerabilityResults(mockAppId);

    expect(result).toEqual(
      resolveFailure(
        localeI18n.getTranslation('apiResponse.projectNotFound'),
        400
      )
    );
  });

  it('should return failure if project is not found from configured list', async () => {
    const result = await getScanVulnerabilityResults('nonExistingProjectId');

    expect(result).toEqual(
      resolveFailure(
        localeI18n.getTranslation('apiResponse.projectNotFound'),
        400
      )
    );
  });
});
